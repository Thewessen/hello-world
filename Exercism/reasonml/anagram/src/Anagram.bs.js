// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function tail(word, n) {
  return $$String.sub(word, n, word.length - n | 0);
}

function removeChar(word, $$char) {
  var i = $$String.index(word, $$char);
  return $$String.sub(word, 0, i) + tail(word, i + 1 | 0);
}

function anagrams(word, candidates) {
  return List.filter((function (param) {
                  var word1 = word;
                  var word2 = param;
                  if (word1.length === word2.length && $$String.lowercase_ascii(word1) !== $$String.lowercase_ascii(word2)) {
                    var _word1 = $$String.lowercase_ascii(word1);
                    var _word2 = $$String.lowercase_ascii(word2);
                    while(true) {
                      var word2$1 = _word2;
                      var word1$1 = _word1;
                      var $$char;
                      try {
                        $$char = Caml_string.get(word1$1, 0);
                      }
                      catch (raw_exn){
                        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                        if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
                          return true;
                        } else {
                          throw exn;
                        }
                      }
                      if ($$String.contains(word2$1, $$char)) {
                        _word2 = removeChar(word2$1, $$char);
                        _word1 = tail(word1$1, 1);
                        continue ;
                      } else {
                        return false;
                      }
                    };
                  } else {
                    return false;
                  }
                }))(candidates);
}

exports.anagrams = anagrams;
/* No side effect */
