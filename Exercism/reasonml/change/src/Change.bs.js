// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function min(a, b) {
  var match = List.length(a) < List.length(b);
  if (match) {
    return a;
  } else {
    return b;
  }
}

function makeChange(value, change) {
  var make = function (result, _ch) {
    while(true) {
      var ch = _ch;
      if (ch) {
        var coin = ch[0];
        $$Array.iteri((function(coin){
            return function (i, r) {
              if (i >= coin) {
                var match = Caml_array.caml_array_get(result, i - coin | 0);
                if (match !== undefined) {
                  var l = match;
                  if (r !== undefined) {
                    result[i] = min(Pervasives.$at(l, /* :: */[
                              coin,
                              /* [] */0
                            ]), r);
                    return /* () */0;
                  } else {
                    result[i] = Pervasives.$at(l, /* :: */[
                          coin,
                          /* [] */0
                        ]);
                    return /* () */0;
                  }
                } else {
                  return /* () */0;
                }
              } else {
                return 0;
              }
            }
            }(coin)), result);
        _ch = ch[1];
        continue ;
      } else {
        return result;
      }
    };
  };
  var match = value < 0;
  if (match) {
    return ;
  } else {
    return Caml_array.caml_array_get(make(Caml_array.caml_make_vect(value + 1 | 0, /* [] */0), change), value);
  }
}

exports.min = min;
exports.makeChange = makeChange;
/* No side effect */
