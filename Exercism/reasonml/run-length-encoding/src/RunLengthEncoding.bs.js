// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$String = require("bs-platform/lib/js/string.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function tail(str, n) {
  return $$String.sub(str, n, str.length - n | 0);
}

function encode(str) {
  var match = str.match((/(\D)(\1*)/));
  if (match !== null) {
    if (match.length !== 3) {
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "RunLengthEncoding.re",
              4,
              2
            ]
          ];
    }
    var f = match[0];
    var g1 = match[1];
    var g2 = match[2];
    var match$1 = g2 === "";
    return (
            match$1 ? "" : String(f.length)
          ) + g1 + encode(tail(str, f.length));
  } else {
    return "";
  }
}

function decode(str) {
  var match = str.match((/(\d*)(\D)/));
  if (match !== null) {
    if (match.length !== 3) {
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "RunLengthEncoding.re",
              12,
              2
            ]
          ];
    }
    var f = match[0];
    var g1 = match[1];
    var g2 = match[2];
    var match$1 = g1 === "";
    return $$String.make(match$1 ? 1 : Caml_format.caml_int_of_string(g1), Caml_string.get(g2, 0)) + decode(tail(str, f.length));
  } else {
    return "";
  }
}

exports.tail = tail;
exports.encode = encode;
exports.decode = decode;
/* No side effect */
