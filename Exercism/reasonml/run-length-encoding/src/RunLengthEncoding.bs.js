// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function tail(str, n) {
  return $$String.sub(str, n, str.length - n | 0);
}

function code(regex, fn, str) {
  var match = str.match(regex);
  if (match !== null) {
    return Curry._1(fn, match) + code(regex, fn, tail(str, Caml_array.caml_array_get(match, 0).length));
  } else {
    return "";
  }
}

var partial_arg = (/(\D)(\1*)/);

function encode(param) {
  return code(partial_arg, (function (param) {
                if (param.length !== 3) {
                  throw [
                        Caml_builtin_exceptions.match_failure,
                        /* tuple */[
                          "RunLengthEncoding.re",
                          10,
                          39
                        ]
                      ];
                }
                var f = param[0];
                var g1 = param[1];
                var g2 = param[2];
                var match = g2 === "";
                return (
                        match ? "" : String(f.length)
                      ) + g1;
              }), param);
}

var partial_arg$1 = (/(\d*)(\D)/);

function decode(param) {
  return code(partial_arg$1, (function (param) {
                if (param.length !== 3) {
                  throw [
                        Caml_builtin_exceptions.match_failure,
                        /* tuple */[
                          "RunLengthEncoding.re",
                          13,
                          39
                        ]
                      ];
                }
                var g1 = param[1];
                var g2 = param[2];
                var match = g1 === "";
                return $$String.make(match ? 1 : Caml_format.caml_int_of_string(g1), Caml_string.get(g2, 0));
              }), param);
}

exports.tail = tail;
exports.encode = encode;
exports.decode = decode;
/* partial_arg Not a pure module */
