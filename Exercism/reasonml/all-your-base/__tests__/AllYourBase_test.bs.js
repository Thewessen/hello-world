// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var AllYourBase$AllYourBase = require("../src/AllYourBase.bs.js");

Jest.describe("all-your-base", (function (param) {
        Jest.test("single bit one to decimal", (function (param) {
                return Jest.Expect.toEqual(/* :: */[
                            1,
                            /* [] */0
                          ], Jest.Expect.expect(AllYourBase$AllYourBase.rebase(2, /* :: */[
                                      1,
                                      /* [] */0
                                    ])(100)));
              }));
        Jest.test("binary to single decimal", (function (param) {
                return Jest.Expect.toEqual(/* :: */[
                            5,
                            /* [] */0
                          ], Jest.Expect.expect(AllYourBase$AllYourBase.rebase(2, /* :: */[
                                      1,
                                      /* :: */[
                                        0,
                                        /* :: */[
                                          1,
                                          /* [] */0
                                        ]
                                      ]
                                    ])(10)));
              }));
        Jest.test("single decimal to binary", (function (param) {
                return Jest.Expect.toEqual(/* :: */[
                            1,
                            /* :: */[
                              0,
                              /* :: */[
                                1,
                                /* [] */0
                              ]
                            ]
                          ], Jest.Expect.expect(AllYourBase$AllYourBase.rebase(10, /* :: */[
                                      5,
                                      /* [] */0
                                    ])(2)));
              }));
        Jest.test("binary to multiple decimal", (function (param) {
                return Jest.Expect.toEqual(/* :: */[
                            4,
                            /* :: */[
                              2,
                              /* [] */0
                            ]
                          ], Jest.Expect.expect(AllYourBase$AllYourBase.rebase(2, /* :: */[
                                      1,
                                      /* :: */[
                                        0,
                                        /* :: */[
                                          1,
                                          /* :: */[
                                            0,
                                            /* :: */[
                                              1,
                                              /* :: */[
                                                0,
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ])(10)));
              }));
        Jest.test("decimal to binary", (function (param) {
                return Jest.Expect.toEqual(/* :: */[
                            1,
                            /* :: */[
                              0,
                              /* :: */[
                                1,
                                /* :: */[
                                  0,
                                  /* :: */[
                                    1,
                                    /* :: */[
                                      0,
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ], Jest.Expect.expect(AllYourBase$AllYourBase.rebase(10, /* :: */[
                                      4,
                                      /* :: */[
                                        2,
                                        /* [] */0
                                      ]
                                    ])(2)));
              }));
        Jest.test("trinary to hexadecimal", (function (param) {
                return Jest.Expect.toEqual(/* :: */[
                            2,
                            /* :: */[
                              10,
                              /* [] */0
                            ]
                          ], Jest.Expect.expect(AllYourBase$AllYourBase.rebase(3, /* :: */[
                                      1,
                                      /* :: */[
                                        1,
                                        /* :: */[
                                          2,
                                          /* :: */[
                                            0,
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ])(16)));
              }));
        Jest.test("hexadecimal to trinary", (function (param) {
                return Jest.Expect.toEqual(/* :: */[
                            1,
                            /* :: */[
                              1,
                              /* :: */[
                                2,
                                /* :: */[
                                  0,
                                  /* [] */0
                                ]
                              ]
                            ]
                          ], Jest.Expect.expect(AllYourBase$AllYourBase.rebase(16, /* :: */[
                                      2,
                                      /* :: */[
                                        10,
                                        /* [] */0
                                      ]
                                    ])(3)));
              }));
        Jest.test("15-bit integer", (function (param) {
                return Jest.Expect.toEqual(/* :: */[
                            6,
                            /* :: */[
                              10,
                              /* :: */[
                                45,
                                /* [] */0
                              ]
                            ]
                          ], Jest.Expect.expect(AllYourBase$AllYourBase.rebase(97, /* :: */[
                                      3,
                                      /* :: */[
                                        46,
                                        /* :: */[
                                          60,
                                          /* [] */0
                                        ]
                                      ]
                                    ])(73)));
              }));
        Jest.test("empty list", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(AllYourBase$AllYourBase.rebase(2, /* [] */0)(10)));
              }));
        Jest.test("single zero", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(AllYourBase$AllYourBase.rebase(10, /* :: */[
                                      0,
                                      /* [] */0
                                    ])(2)));
              }));
        Jest.test("multiple zeros", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(AllYourBase$AllYourBase.rebase(10, /* :: */[
                                      0,
                                      /* :: */[
                                        0,
                                        /* :: */[
                                          0,
                                          /* [] */0
                                        ]
                                      ]
                                    ])(2)));
              }));
        Jest.test("leading zeros", (function (param) {
                return Jest.Expect.toEqual(/* :: */[
                            4,
                            /* :: */[
                              2,
                              /* [] */0
                            ]
                          ], Jest.Expect.expect(AllYourBase$AllYourBase.rebase(7, /* :: */[
                                      0,
                                      /* :: */[
                                        6,
                                        /* :: */[
                                          0,
                                          /* [] */0
                                        ]
                                      ]
                                    ])(10)));
              }));
        Jest.test("first base is zero", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(AllYourBase$AllYourBase.rebase(0, /* [] */0)(10)));
              }));
        Jest.test("first base is negative", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(AllYourBase$AllYourBase.rebase(-1, /* [] */0)(10)));
              }));
        Jest.test("negative digit", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(AllYourBase$AllYourBase.rebase(2, /* :: */[
                                      1,
                                      /* :: */[
                                        -1,
                                        /* :: */[
                                          1,
                                          /* :: */[
                                            0,
                                            /* :: */[
                                              1,
                                              /* :: */[
                                                0,
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ])(10)));
              }));
        Jest.test("invalid positive digit", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(AllYourBase$AllYourBase.rebase(2, /* :: */[
                                      1,
                                      /* :: */[
                                        2,
                                        /* :: */[
                                          1,
                                          /* :: */[
                                            0,
                                            /* :: */[
                                              1,
                                              /* :: */[
                                                0,
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ])(10)));
              }));
        Jest.test("second base is one", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(AllYourBase$AllYourBase.rebase(10, /* [] */0)(1)));
              }));
        Jest.test("second base is zero", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(AllYourBase$AllYourBase.rebase(10, /* :: */[
                                      1,
                                      /* [] */0
                                    ])(0)));
              }));
        Jest.test("second base is negative", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(AllYourBase$AllYourBase.rebase(10, /* :: */[
                                      1,
                                      /* [] */0
                                    ])(-1)));
              }));
        return Jest.test("both bases are negative", (function (param) {
                      return Jest.Expect.toEqual(undefined, Jest.Expect.expect(AllYourBase$AllYourBase.rebase(-1, /* :: */[
                                            1,
                                            /* [] */0
                                          ])(-1)));
                    }));
      }));

/*  Not a pure module */
