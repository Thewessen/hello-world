// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function $star$star(a, b) {
  if (b !== 0) {
    return Caml_int32.imul(a, $star$star(a, b - 1 | 0));
  } else {
    return 1;
  }
}

function toBase(_to, n) {
  if (n !== 0) {
    return Pervasives.$at(toBase(_to, Caml_int32.div(n, _to)), /* :: */[
                Caml_int32.mod_(n, _to),
                /* [] */0
              ]);
  } else {
    return /* [] */0;
  }
}

function fromBase(_from, digits) {
  return List.fold_left((function (prim, prim$1) {
                return prim + prim$1 | 0;
              }), 0, List.mapi((function (i, v) {
                    return Caml_int32.imul(v, $star$star(_from, i));
                  }), List.rev(digits)));
}

function rebase(_from, digits) {
  if (List.exists((function (param) {
            return _from <= param;
          }), digits) || List.exists((function (param) {
            return 0 > param;
          }), digits) || List.fold_left((function (prim, prim$1) {
            return prim + prim$1 | 0;
          }), 0, digits) === 0) {
    return (function (param) {
        return ;
      });
  } else {
    return (function (_to) {
        if (_to <= 0) {
          return ;
        } else {
          return toBase(_to, fromBase(_from, digits));
        }
      });
  }
}

exports.rebase = rebase;
/* No side effect */
