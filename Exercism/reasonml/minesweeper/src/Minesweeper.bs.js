// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function sur(x, y, mines) {
  return List.map((function (param) {
                var mines$1 = mines;
                var x$1 = x + param[0] | 0;
                var y$1 = y + param[1] | 0;
                try {
                  return Caml_string.get(Caml_array.caml_array_get(mines$1, x$1), y$1);
                }
                catch (raw_exn){
                  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                  if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
                    return /* " " */32;
                  } else {
                    throw exn;
                  }
                }
              }), /* :: */[
              /* tuple */[
                0,
                1
              ],
              /* :: */[
                /* tuple */[
                  1,
                  1
                ],
                /* :: */[
                  /* tuple */[
                    1,
                    0
                  ],
                  /* :: */[
                    /* tuple */[
                      1,
                      -1
                    ],
                    /* :: */[
                      /* tuple */[
                        0,
                        -1
                      ],
                      /* :: */[
                        /* tuple */[
                          -1,
                          -1
                        ],
                        /* :: */[
                          /* tuple */[
                            -1,
                            0
                          ],
                          /* :: */[
                            /* tuple */[
                              -1,
                              1
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

function count($$char, surr) {
  return List.length(List.filter((function (c) {
                      return Caml_obj.caml_equal(c, $$char);
                    }))(surr));
}

function annotate(mines) {
  return $$Array.mapi((function (x, row) {
                return $$String.mapi((function (y, $$char) {
                              if ($$char !== 42) {
                                var $$char$1 = Caml_string.get(String(count(/* "*" */42, sur(x, y, mines))), 0);
                                var match = $$char$1 === /* "0" */48;
                                if (match) {
                                  return /* " " */32;
                                } else {
                                  return $$char$1;
                                }
                              } else {
                                return $$char;
                              }
                            }), row);
              }), mines);
}

exports.annotate = annotate;
/* No side effect */
